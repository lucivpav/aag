#!/usr/bin/env ruby

require 'trollop'
require 'ostruct'

class FA
  def initialize(input)
    @n = Hash.new
    @t = Array.new
    @d = Hash.new {|h,k| h[k] = Array.new }
    @s = Hash.new
    @f = Hash.new

    input = File.new(input)
    line = input.readline.split
    line[1..-1].each {|i| @t << i}

    input.each_line do |x|
      x = x.split

      state = x[0].gsub(/[<>]/, "");
      @n[state] = nil
      if x[0].include? ">"
        @s[state] = nil
      end
      if x[0].include? "<"
        @f[state] = nil
      end

      x[1..-1].each_with_index do |x, i|
        to = Hash.new
        if x != "-"
          x.split(/\|/).each { |x| to[x] = nil }
        end
        @d[state] << to
      end
    end
  end

  def to_s
    output = deterministic? ? "DFA" : "NFA"
    @t.each { |x| output += " #{x}" }
    @n.each_key do |x|
      output += "\n"
      output += ">" if @s.key?(x)
      output += "<" if @f.key?(x)
      output += x
      @d[x].each do |x|
        output += " "
        first = true
        x.each_key do |x| 
          output += "|" if !first 
          output += x
          first = false if first
        end
        output += "-" if x.empty?
      end
    end
    output
  end

  def eps_closure_state(n)
    @visited[n] = nil
    @d[n][-1].each_key do |x|
      eps_closure_state(x) if !@visited.key?(x)
    end
  end

  def eps_closure
    closure = Hash.new {|h,k| h[k] = OpenStruct.new}
    @n.each_key do |x|
      @visited = Hash.new
      eps_closure_state(x)
      closure[x].to = Array.new
      closure[x].start = @s.key?(x)
      closure[x].final = false
      @visited.each_key {|y| closure[x].to << y}
      @visited.each_key do |y|
        closure[x].final = true if @f.key?(y)
      end
    end
    closure
  end

  def eps_closure_print
    output = String.new
    eps_closure.each do |state,x|
      output += ">" if x.start
      output += "<" if x.final
      output += state + ": " + x.to.join("|") + "\n"
    end
    output
  end

  def remove_eps
    return self if !@t.include?("\\eps")
    remove_multiple_start_symbols
    closure = eps_closure
    @n.each_key {|x| @d[x].pop}
    @t.pop # TODO: eps may not be the last transition
    
    @n.each_key do |x|
      @f[x] = nil if closure[x].final
    end

    @n.each_key do |x|
      closure[x].to.each do |y|
        @d[y].each_with_index do |z,i|
          z.each_key do |k|
            @d[x][i][k]=nil
          end
        end
      end
    end
    self
  end

  def useless?(n)
    @visited[n] = nil
    return false if @f.key?(n)
    @d[n].each do |x|
      x.each_key do |y|
        useless = true
        useless = useless?(y) if !@visited.key?(y)
        return false if !useless
      end
    end
    return true
  end

  def remove_useless
    remove_multiple_start_symbols
    useless = Hash.new
    @n.each_key do |x|
      @visited = Hash.new
      useless[x] = nil if useless?(x)
    end
    useless.each_key do |x|
      @n.delete(x)
    end
    self
  end

  def unreachable?(n)
    @visited[n] = nil
    return false if @s.key?(n)
    @d.each do |state,x|
      next if state == n
      found = false
      x.each do |y|
        if y.key?(n)
          found = true
          break
        end
      end
      next if !found
      unreachable = true
      unreachable = unreachable?(state) if !@visited.key?(state)
      return false if !unreachable
    end
    return true
  end

  def remove_unreachable
    remove_multiple_start_symbols
    unreachable = Hash.new
    @n.each_key do |x|
      @visited = Hash.new
      unreachable[x] = nil if unreachable?(x)
    end
    unreachable.each_key do |x|
      @n.delete(x)
      @d.delete(x)
      @f.delete(x)
    end
    self
  end

  def determinize
    remove_multiple_start_symbols
    remove_eps
    remove_useless
    mergeSymbol = "-"
    while true do
      newStates = Array.new
      @d.each do |state,x|
        x.each_with_index do |y,i|
          next if y.empty?
          new = OpenStruct.new
          new.from = y.dup
          tmp = Hash.new
          y.each_key do |x|
            x.split(mergeSymbol).each {|y| tmp[y]=nil}
          end
          new.name = tmp.keys.sort.join(mergeSymbol)
          @d[state][i] = { new.name => nil}
          newStates << new if !@n.key?(new.name)
        end
      end
      break if newStates.empty?
      newStates.each do |x|
        next if @n.key?(x.name)
        @n[x.name] = nil
        for i in 0..@t.size-1
          to = Hash.new
          x.from.each_key do |y|
            next if !@d.key?(y) || @d[y][i].empty?
            target = @d[y][i].keys[0]
            to[target] = nil
          end
          @d[x.name] << to
        end
        x.from.each_key {|z| @f[x.name]=nil if @f.key?(z)}
      end
    end
    remove_unreachable
    normalize_state_names
    self
  end

  def deterministic?
    @n.each_key do |n|
      for i in 0..@t.size-1
        return false if @d[n][i].size > 1
      end
    end
    true
  end

  def remove_multiple_start_symbols
    return self if @s.count < 2

    startSymbol = "S"
    while @n.key?(startSymbol) do
      startSymbol = "_" + startSymbol
    end
    if !@t.include?("\\eps")
      @t << "\\eps"
      @n.each_key do |x|
        @d[x] << Hash.new
      end
    end

    @n[startSymbol] = nil
    for i in 1..@t.size do @d[startSymbol] << Hash.new end
    @s.each_key do |x|
      @d[startSymbol][@t.size-1][ x ] = nil
    end
    @s = Hash.new
    @s[startSymbol] = nil
    self
  end

  def reverse
    d = Hash.new {|h,k| h[k] = Array.new }
    @d.each do |from, x|
      x.each do |y|
        d[from] << Hash.new
      end
    end
    @d.each do |from, x|
      x.each_with_index do |y,i|
        y.each_key do |z|
          d[z][i][from] = nil
        end
      end
    end
    @d = d
    @s, @f = @f, @s
    self
  end

  def normalize_state_names
    names = Hash.new
    i=0
    @n.each_key do |x|
      names[x] = (i+=1).to_s
    end
    @n.clear
    names.each_value {|x| @n[x] = nil}

    @d.each do |from, x|
      x.each_with_index do |y,i|
        new = Hash.new
        y.each_key do |z|
          new[ names[z] ] = nil
        end
        @d[from][i] = new
      end
    end

    d = @d.dup
    s = @s.dup
    f = @f.dup
    @d.clear
    @s.clear
    @f.clear
    names.each do |from,to|
      @d[to] = d[from]
      if s.key?(from)
        @s[to] = nil
      end
      if f.key?(from)
        @f[to] = nil
      end
    end
  end

  def minimize
      reverse
      determinize
      reverse
      determinize
    self
  end
end

opts = Trollop::options do
  opt :"eps-closure", "Compute epsilon closure"
  opt :"remove-eps", "Remove epsilon transitions"
  opt :"remove-useless", "Remove useless states"
  opt :"remove-unreachable", "Remove unreachable states"
  opt :"determinize", "Determinize finite automata"
  opt :"remove-multiple-start-symbols",
        "Replace multiple start symbols by one symbol"
  opt :"reverse", "Reverse finite automata"
  opt :"minimize", "Minimize deterministic finite automata"
end

if ARGV.count < 1
  puts "Usage: aag [options] input"
  exit
end

fa = FA.new(ARGV[0])
puts fa.eps_closure_print if opts[:"eps-closure"]
puts fa.remove_eps if opts[:"remove-eps"]
puts fa.remove_useless if opts[:"remove-useless"]
puts fa.remove_unreachable if opts[:"remove-unreachable"]
puts fa.remove_multiple_start_symbols if opts[:"remove-multiple-start-symbols"]
puts fa.reverse if opts[:"reverse"]

if opts[:"determinize"]
  fa.determinize
  fa.minimize if opts[:"minimize"]
  puts fa
end
